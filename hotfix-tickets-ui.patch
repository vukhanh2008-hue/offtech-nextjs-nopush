diff --git a/app/tickets/page.tsx b/app/tickets/page.tsx
index 0000000..1111111 100644
--- a/app/tickets/page.tsx
+++ b/app/tickets/page.tsx
@@ -0,0 +1,285 @@
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";

type Ticket = {
  id: string;
  title: string;
  province: string | null;
  ward: string | null;
  mode: "Online" | "Onsite";
  status: "Open" | "In_Progress" | "On_Hold" | "Resolved" | "Closed";
};

const MODES = ["Online", "Onsite"] as const;
const STATUS = ["Open", "In_Progress", "Resolved", "Closed"] as const;

export default function TicketsPage() {
  const router = useRouter();

  // filters
  const [statusFilter, setStatusFilter] =
    useState<Ticket["status"]>("Open");
  const [onlyMine, setOnlyMine] = useState(true);

  // data
  const [rows, setRows] = useState<Ticket[]>([]);
  const [loading, setLoading] = useState(false);
  const [busyId, setBusyId] = useState<string | null>(null);

  // create form
  const [title, setTitle] = useState("");
  const [province, setProvince] = useState("");
  const [ward, setWard] = useState("");
  const [mode, setMode] = useState<Ticket["mode"]>("Online");

  // ====== data loader (giữ nguyên endpoint list hiện có của bạn) ======
  async function load() {
    setLoading(true);
    try {
      const qs = new URLSearchParams({
        status: statusFilter,
        mine: String(onlyMine),
      }).toString();

      const res = await fetch(`/api/tickets/list?${qs}`, { cache: "no-store" });
      if (!res.ok) throw new Error(await res.text());
      const data = (await res.json()) as Ticket[];
      setRows(data);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [statusFilter, onlyMine]);

  // ====== HOTFIX handlers ======
  async function startTicket(id: string) {
    try {
      setBusyId(id);

      // optimistic UI
      setRows(prev => prev.map(r => (r.id === id ? { ...r, status: "In_Progress" } : r)));

      const res = await fetch("/api/tickets/start", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id }),
      });
      if (!res.ok) throw new Error(await res.text());

      // chuyển filter để thấy ngay vé vừa đổi
      setStatusFilter("In_Progress");
      router.refresh();
    } catch (e) {
      // revert nếu lỗi
      setRows(prev => prev.map(r => (r.id === id ? { ...r, status: "Open" } : r)));
      alert("Không thể Start ticket. Vui lòng thử lại.");
    } finally {
      setBusyId(null);
    }
  }

  async function resolveTicket(id: string) {
    try {
      setBusyId(id);

      // optimistic
      setRows(prev => prev.map(r => (r.id === id ? { ...r, status: "Resolved" } : r)));

      const res = await fetch("/api/tickets/resolve", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id }),
      });
      if (!res.ok) throw new Error(await res.text());

      setStatusFilter("Resolved");
      router.refresh();
      setTimeout(() => {
        alert("Đã đánh dấu Resolved. Vé đã xuất hiện ở mục Approvals cho Manager.");
      }, 100);
    } catch (e) {
      setRows(prev => prev.map(r => (r.id === id ? { ...r, status: "In_Progress" } : r)));
      alert("Không thể đánh dấu Resolved. Vui lòng thử lại.");
    } finally {
      setBusyId(null);
    }
  }

  // tạo ticket (giữ endpoint create của bạn)
  async function createTicket() {
    if (!title.trim()) {
      alert("Nhập tiêu đề");
      return;
    }
    setBusyId("create");
    try {
      const res = await fetch("/api/tickets/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title,
          province: province || null,
          ward: ward || null,
          mode,
        }),
      });
      if (!res.ok) throw new Error(await res.text());

      setTitle("");
      setProvince("");
      setWard("");
      // sau khi tạo thì vẫn đang ở filter Open → load lại
      await load();
      router.refresh();
    } catch (e) {
      alert("Không thể tạo ticket. Vui lòng thử lại.");
    } finally {
      setBusyId(null);
    }
  }

  return (
    <div className="mx-auto max-w-4xl p-4">
      <h1 className="text-3xl font-bold mb-6">Tickets</h1>

      {/* Create box */}
      <div className="border rounded-md p-4 mb-6">
        <h2 className="font-semibold text-xl mb-3">Tạo ticket mới</h2>
        <div className="grid gap-3 sm:grid-cols-2">
          <input
            value={title}
            onChange={e => setTitle(e.target.value)}
            placeholder="Tiêu đề"
            className="border rounded px-3 py-2"
          />
          <input
            value={province}
            onChange={e => setProvince(e.target.value)}
            placeholder="Tỉnh/Thành phố"
            className="border rounded px-3 py-2"
          />
          <input
            value={ward}
            onChange={e => setWard(e.target.value)}
            placeholder="Phường/Xã"
            className="border rounded px-3 py-2"
          />
          <div className="flex gap-2">
            <select
              value={mode}
              onChange={e => setMode(e.target.value as Ticket["mode"])}
              className="border rounded px-3 py-2"
            >
              {MODES.map(m => (
                <option key={m} value={m}>
                  {m}
                </option>
              ))}
            </select>
            <button
              disabled={busyId === "create"}
              onClick={createTicket}
              className="border rounded px-4 py-2"
            >
              Tạo
            </button>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="flex items-center gap-4 mb-3">
        <select
          value={statusFilter}
          onChange={e => setStatusFilter(e.target.value as Ticket["status"])}
          className="border rounded px-3 py-2"
        >
          {STATUS.map(s => (
            <option key={s} value={s}>
              {s}
            </option>
          ))}
        </select>

        <label className="inline-flex items-center gap-2">
          <input
            type="checkbox"
            checked={onlyMine}
            onChange={e => setOnlyMine(e.target.checked)}
          />
          <span>Chỉ của tôi</span>
        </label>
      </div>

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full border rounded">
          <thead>
            <tr className="bg-gray-50">
              <th className="text-left p-2">Tiêu đề</th>
              <th className="text-left p-2">Địa bàn</th>
              <th className="text-left p-2">Mode</th>
              <th className="text-left p-2">Trạng thái</th>
              <th className="text-left p-2">Hành động</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr>
                <td className="p-3" colSpan={5}>
                  Đang tải…
                </td>
              </tr>
            ) : rows.length === 0 ? (
              <tr>
                <td className="p-3" colSpan={5}>
                  Không có ticket.
                </td>
              </tr>
            ) : (
              rows.map(r => (
                <tr key={r.id} className="border-t">
                  <td className="p-2">{r.title}</td>
                  <td className="p-2">
                    {(r.province || "-")} / {(r.ward || "-")}
                  </td>
                  <td className="p-2">{r.mode}</td>
                  <td className="p-2">{r.status}</td>
                  <td className="p-2">
                    {r.status === "Open" && (
                      <button
                        disabled={busyId === r.id}
                        onClick={() => startTicket(r.id)}
                        className="border rounded px-3 py-1"
                      >
                        Start
                      </button>
                    )}
                    {r.status === "In_Progress" && (
                      <button
                        disabled={busyId === r.id}
                        onClick={() => resolveTicket(r.id)}
                        className="border rounded px-3 py-1"
                      >
                        Mark Resolved
                      </button>
                    )}
                    {r.status !== "Open" && r.status !== "In_Progress" && (
                      <span className="text-gray-500">—</span>
                    )}
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
